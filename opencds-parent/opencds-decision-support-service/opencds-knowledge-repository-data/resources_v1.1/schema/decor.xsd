<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 
    DECOR schema v27
    Copyright (C) 2009-2012  Dr. Kai U. Heitmann
 
    This program is free software; you can redistribute it and/or modify it under the terms 
    of the GNU General Public License as published by the Free Software Foundation; 
    either version 3 of the License, or (at your option) any later version.
 
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
    See the GNU General Public License for more details.
 
    See http://www.gnu.org/licenses/gpl.html
 
-->
<xs:schema xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:sch="http://purl.oclc.org/dsdl/schematron" elementFormDefault="qualified">
 
    <!-- this is the root element of any decor main file -->
    <xs:element name="decor">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="1" maxOccurs="1" ref="project">
                    <xs:annotation>
                        <xs:appinfo>
                            <xforms:label xml:lang="nl-NL">Projectinformatie</xforms:label>
                            <xforms:label xml:lang="en-US">Project Information</xforms:label>
                            <xforms:label xml:lang="de-DE">Informationen zum Projekt</xforms:label>
                        </xs:appinfo>
                        <xs:documentation xml:lang="nl-NL">Projectinformatie</xs:documentation>
                        <xs:documentation xml:lang="en-US">Project Information</xs:documentation>
                        <xs:documentation xml:lang="de-DE">Informationen zum Projekt</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element minOccurs="0" maxOccurs="1" ref="datasets">
                    <xs:annotation>
                        <xs:appinfo>
                            <xforms:label xml:lang="nl-NL">Data Set Definitie</xforms:label>
                            <xforms:label xml:lang="en-US">Data Set Definition</xforms:label>
                            <xforms:label xml:lang="de-DE">Data Set Definition</xforms:label>
                        </xs:appinfo>
                        <xs:documentation xml:lang="nl-NL">Data Set Definitie</xs:documentation>
                        <xs:documentation xml:lang="en-US">Data Set Definition</xs:documentation>
                        <xs:documentation xml:lang="de-DE">Data Set Definition</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element minOccurs="0" maxOccurs="1" ref="scenarios">
                    <xs:annotation>
                        <xs:appinfo>
                            <xforms:label xml:lang="nl-NL">Scenario Definitie</xforms:label>
                            <xforms:label xml:lang="en-US">Scenario Definition</xforms:label>
                            <xforms:label xml:lang="de-DE">Scenario Definition</xforms:label>
                        </xs:appinfo>
                        <xs:documentation xml:lang="nl-NL">Scenario Definitie, mit actoren, transacties, modellem, cardinaliteiten, conformance statements</xs:documentation>
                        <xs:documentation xml:lang="en-US">Scenario Definition, with actors, transactions, models, cardinalities, conformance statements</xs:documentation>
                        <xs:documentation xml:lang="de-DE">Scenario Definition, mit Aktoren, Transaktionen, Modellem, Kardinalitäten, Konformitätsangaben</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <!-- identifiers -->
                <xs:element minOccurs="0" maxOccurs="1" ref="ids">
                    <xs:annotation>
                        <xs:appinfo>
                            <xforms:label xml:lang="nl-NL">Gebruikte Identificaties</xforms:label>
                            <xforms:label xml:lang="en-US">Identifiers used</xforms:label>
                            <xforms:label xml:lang="de-DE">Genutzte Identifikatoren</xforms:label>
                        </xs:appinfo>
                        <xs:documentation xml:lang="nl-NL">Gebruikte Identificaties, alleen voor rendering</xs:documentation>
                        <xs:documentation xml:lang="en-US">Identifiers used, rendering only</xs:documentation>
                        <xs:documentation xml:lang="de-DE">Genutzte Identifikatoren, nur zur Anzeige</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <!-- coded concepts -->
                <xs:element minOccurs="0" maxOccurs="1" ref="codedConcepts">
                    <xs:annotation>
                        <xs:appinfo>
                            <xforms:label xml:lang="nl-NL">Gebruikte Codestelsels</xforms:label>
                            <xforms:label xml:lang="en-US">Code systems used</xforms:label>
                            <xforms:label xml:lang="de-DE">Genutzte Kodesysteme</xforms:label>
                        </xs:appinfo>
                        <xs:documentation xml:lang="nl-NL">Gebruikte Codestelsels, alleen voor rendering</xs:documentation>
                        <xs:documentation xml:lang="en-US">Code systems used, rendering only</xs:documentation>
                        <xs:documentation xml:lang="de-DE">Genutzte Kodesysteme, nur zur Anzeige</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <!-- terminology, e.g. value sets -->
                <xs:element minOccurs="0" maxOccurs="1" ref="terminology">
                    <xs:annotation>
                        <xs:appinfo>
                            <xforms:label xml:lang="nl-NL">Terminologische definities</xforms:label>
                            <xforms:label xml:lang="en-US">Terminology definitions</xforms:label>
                            <xforms:label xml:lang="de-DE">Terminologische Definitionen</xforms:label>
                        </xs:appinfo>
                        <xs:documentation xml:lang="nl-NL">Terminologische definities</xs:documentation>
                        <xs:documentation xml:lang="en-US">Terminology definitions</xs:documentation>
                        <xs:documentation xml:lang="de-DE">Terminologische Definitionen</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <!-- rules -->
                <xs:element minOccurs="0" maxOccurs="1" ref="rules">
                    <xs:annotation>
                        <xs:appinfo>
                            <xforms:label xml:lang="nl-NL">Regeldefinities</xforms:label>
                            <xforms:label xml:lang="en-US">Rules definitions</xforms:label>
                            <xforms:label xml:lang="de-DE">Regeldefinitionen</xforms:label>
                        </xs:appinfo>
                        <xs:documentation xml:lang="nl-NL">Regeldefinities</xs:documentation>
                        <xs:documentation xml:lang="en-US">Rules definitions</xs:documentation>
                        <xs:documentation xml:lang="de-DE">Regeldefinitionen</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <!-- issues -->
                <xs:element minOccurs="0" maxOccurs="1" ref="issues">
                    <xs:annotation>
                        <xs:appinfo>
                            <xforms:label xml:lang="nl-NL">Probleemlijst</xforms:label>
                            <xforms:label xml:lang="en-US">Issue list</xforms:label>
                            <xforms:label xml:lang="de-DE">Problemliste</xforms:label>
                        </xs:appinfo>
                        <xs:documentation xml:lang="nl-NL">Probleemlijst</xs:documentation>
                        <xs:documentation xml:lang="en-US">Issue list</xs:documentation>
                        <xs:documentation xml:lang="de-DE">Problemliste</xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="project">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="name" type="BusinessNameWithLanguage" minOccurs="1" maxOccurs="unbounded"/>
                <xs:element name="desc" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="copyright" minOccurs="1" maxOccurs="unbounded"/>
                <xs:element ref="author" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="reference" minOccurs="0" maxOccurs="1"/>
                <xs:element ref="restURI" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="contact" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="version" type="ProjectHistory" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attribute name="id" type="Oid"/>
            <xs:attribute name="prefix" type="ShortDescriptiveName"/>
            <xs:attribute name="defaultLanguage" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="author">
        <xs:complexType mixed="true">
            <xs:attribute name="id" type="Oid" use="required"/>
            <xs:attribute name="username" type="xs:string" use="optional"/>
            <xs:attribute name="email" type="EMail" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="copyright">
        <xs:complexType>
            <xs:annotation>
                <xs:appinfo>
                    <sch:pattern name="Validate Copyright">
                        <sch:rule context="copyright">
                            <sch:assert test="string-length(@years)&gt;0">ERROR: At least one year must be present in copyright.</sch:assert>
                        </sch:rule>
                    </sch:pattern>
                </xs:appinfo>
            </xs:annotation>
            <xs:sequence>
                <xs:element name="addrLine" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attribute name="years" type="Years"/>
            <xs:attribute name="by" type="ShortDescriptiveName"/>
            <xs:attribute name="logo" type="Uri"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="reference">
        <xs:complexType>
            <xs:annotation>
                <xs:appinfo>
                    <sch:pattern name="Validate Reference">
                        <sch:rule context="reference">
                            <sch:assert test="substring(@url, string-length(@url), 1)='/'">ERROR: reference URL must end with "/".</sch:assert>
                        </sch:rule>
                    </sch:pattern>
                </xs:appinfo>
            </xs:annotation>
            <xs:attribute name="url" type="Uri"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="restURI">
        <xs:complexType mixed="true">
            <xs:annotation>
                <xs:appinfo>
                    <sch:pattern name="Validate REST URI">
                        <sch:rule context="reference">
                            <sch:assert test="substring(@url, string-length(@url), 1)='/'">ERROR: reference URL must end with "/".</sch:assert>
                        </sch:rule>
                    </sch:pattern>
                </xs:appinfo>
            </xs:annotation>
            <xs:attribute name="for" type="DecorObjectType" use="required"/>
            <xs:attribute name="format" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="contact">
        <xs:complexType>
            <xs:attribute name="email" type="Uri"/>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="DecorObjectType">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Decor Object Types</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="DS">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Dataset</xforms:label>
                        <xforms:label xml:lang="en-US">Dataset</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">dataset</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">data set</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Datenset</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="DE">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Data element</xforms:label>
                        <xforms:label xml:lang="en-US">Data Element</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">data element</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">data element</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Datenelement</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="SC">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Scenario</xforms:label>
                        <xforms:label xml:lang="en-US">Scenario</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">scenario</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">scenario</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Szenario</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="TR">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Transactie</xforms:label>
                        <xforms:label xml:lang="en-US">Transaction</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">transactie</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">transaction</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Transaktion</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="AC">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Acteurs</xforms:label>
                        <xforms:label xml:lang="en-US">Actors</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">acteurs</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">actors</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Aktoren</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="VS">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Waardelijst</xforms:label>
                        <xforms:label xml:lang="en-US">Value Set</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">value set</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">value set</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Value Set</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="IS">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Issue</xforms:label>
                        <xforms:label xml:lang="en-US">Issue</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">issue</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">issue</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Issue</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="RL">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Regel</xforms:label>
                        <xforms:label xml:lang="en-US">Rule</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">regel (intern)</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">rule (internal)</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Regel (intern)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="TM">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Template</xforms:label>
                        <xforms:label xml:lang="en-US">Template</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">template</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">template</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Template</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CL">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Conceptlijst</xforms:label>
                        <xforms:label xml:lang="en-US">Concept list</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">conceptlijst</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">concept list</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Konzeptliste</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="EL">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Element</xforms:label>
                        <xforms:label xml:lang="en-US">Element</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">element</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">element</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Element</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="ProjectHistory">
        <xs:sequence>
            <xs:element name="desc" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="date" type="TimeStampNoTimezone"/>
        <xs:attribute name="by" type="ShortDescriptiveName"/>
    </xs:complexType>
    <xs:element name="datasets">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="dataset" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="dataset">
        <xs:annotation>
            <xs:appinfo>
                <sch:pattern name="Validate Data Concept">
                    <sch:rule context="dataset//concept[not(parent::history)]">
                        <sch:let name="cid" value="@id"/>
                        <sch:let name="cef" value="@effectiveDate"/>
                        <sch:assert test="count(preceding-sibling::concept[@id = $cid and @effectiveDate = $cef])=0">ERROR: A concept within a dataset SHALL be unique with respect to its @id and @effectiveTime</sch:assert>
                        <sch:report role="warning" test="count(preceding-sibling::concept[@id = $cid])&gt;0">WARNING: A concept within a dataset SHOULD be unique with respect to its @id</sch:report>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="name" type="BusinessNameWithLanguage" minOccurs="1" maxOccurs="unbounded"/>
                <xs:element name="desc" type="FreeFormMarkupWithLanguage" minOccurs="1" maxOccurs="unbounded"/>
                <xs:element name="concept" type="DataSetConcept" minOccurs="1" maxOccurs="unbounded">
 
                    <!--
                    <xs:key name="conceptkey">
                        <xs:selector xpath=".//concept"/>
                        <xs:field xpath="@id"/>
                    </xs:key>
                    <xs:keyref name="concepthistorykey" refer="conceptkey">
                        <xs:selector xpath=".//history/concept"/>
                        <xs:field xpath="history/concept/@id"/>
                    </xs:keyref>
                    <xs:unique name="conceptuniquekey">
                        <xs:selector xpath="./concept"/>
                        <xs:field xpath="@id"/>
                        <xs:field xpath="@effectiveDate"/>
                    </xs:unique>
                    -->
                </xs:element>
            </xs:sequence>
            <xs:attribute name="id" type="Oid"/>
            <xs:attributeGroup ref="VersionHandling"/>
            <xs:attribute name="statusCode" type="ItemStatusCodeLifeCycle" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="DataSetConceptValue">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="property" type="DataSetValueProperty" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="conceptList" type="DataSetConceptList" minOccurs="0" maxOccurs="unbounded">
                <xs:unique name="conceptlistuniquekey">
                    <xs:selector xpath=".//concept"/>
                    <xs:field xpath="@id"/>
                </xs:unique>
            </xs:element>
            <xs:element ref="example" minOccurs="0" maxOccurs="unbounded"/>
        </xs:choice>
        <xs:attribute name="type" type="DataSetValueType"/>
    </xs:complexType>
    <xs:complexType name="DataSetValueProperty">
        <xs:attribute name="unit" type="xs:string">
            <xs:annotation>
                <xs:documentation>unit for quantities</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="minInclude" type="xs:string">
            <xs:annotation>
                <xs:documentation>range min include for quantities</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxInclude" type="xs:string">
            <xs:annotation>
                <xs:documentation>range max include for quantities</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fractionDigits" type="xs:string">
            <xs:annotation>
                <xs:documentation>fraction digits for quantities, e.g. "1" for at least 1 or "1!" for exactly 1</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="timeStampPrecision" type="DataSetTimeStampPrecision">
            <xs:annotation>
                <xs:documentation>precisions for timing specs</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="default" type="xs:string">
            <xs:annotation>
                <xs:documentation>default value</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="fixed" type="xs:string">
            <xs:annotation>
                <xs:documentation>fixed value</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="minLength" type="SmallNonNegativeInteger">
            <xs:annotation>
                <xs:documentation>min length for strings</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxLength" type="SmallNonNegativeInteger">
            <xs:annotation>
                <xs:documentation>max length for strings</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:simpleType name="DataSetTimeStampPrecision">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Data Set Value Domain Time Stamp Precision</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="Y">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">tenminste jaar (JJJJ)</xforms:label>
                        <xforms:label xml:lang="en-US">at least year (YYYY)</xforms:label>
                        <xforms:label xml:lang="de-DE">mindestens Jahr (JJJJ)</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">at least year (YYYY)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="Y!">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">jaar (JJJJ)</xforms:label>
                        <xforms:label xml:lang="en-US">year (YYYY)</xforms:label>
                        <xforms:label xml:lang="de-DE">Jahr (JJJJ)</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">year (YYYY)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="YM">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">tenminste maand (MM) en jaar (JJJJ)</xforms:label>
                        <xforms:label xml:lang="en-US">at least month (MM) and year (YYYY)</xforms:label>
                        <xforms:label xml:lang="de-DE">mindestens Jahr (JJJJ) und Monat (MM)</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">at least month (MM) and year (YYYY)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="YM!">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">maand (MM) en jaar (JJJJ)</xforms:label>
                        <xforms:label xml:lang="en-US">month (MM) and year (YYYY)</xforms:label>
                        <xforms:label xml:lang="de-DE">Monat (MM) und Jahr (JJJJ)</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">month (MM) and year (YYYY)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="YMD">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">tenminste dag (DD), maand (MM) en jaar (JJJJ)</xforms:label>
                        <xforms:label xml:lang="en-US">at least day (DD), month (MM) and year (YYYY)</xforms:label>
                        <xforms:label xml:lang="de-DE">mindestens Tag (TT), Monat (MM) und Jahr (JJJJ)</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">at least day (DD), month (MM) and year (YYYY)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="YMD!">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">dag (DD), maand (MM) en jaar (JJJJ)</xforms:label>
                        <xforms:label xml:lang="en-US">day (DD), month (MM) and year (YYYY)</xforms:label>
                        <xforms:label xml:lang="de-DE">Tag (TT), Monat (MM) und Jahr (JJJJ)</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">day (DD), month (MM) and year (YYYY)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="YMDHM">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">tenminste dag (DD), maand (MM) en jaar (JJJJ), uur (uu) en minuut (mm)</xforms:label>
                        <xforms:label xml:lang="en-US">at least day (DD), month (MM) and year (YYYY), hour (hh) and minute (mm)</xforms:label>
                        <xforms:label xml:lang="de-DE">mindestens Tag (TT), Monat (MM) und Jahr (JJJJ), Stunde (ss) und Minute (mm)</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">at least day (DD), month (MM) and year (YYYY), hour (hh) and minute (mm)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="DataSetValueType">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Data Set Concept Value Type</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="count">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Aantal</xforms:label>
                        <xforms:label xml:lang="en-US">Count</xforms:label>
                        <xforms:label xml:lang="de-DE">Count</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">count</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="code">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Code</xforms:label>
                        <xforms:label xml:lang="en-US">Code</xforms:label>
                        <xforms:label xml:lang="de-DE">Kode</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">code</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="ordinal">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Ordinaal</xforms:label>
                        <xforms:label xml:lang="en-US">Ordinal</xforms:label>
                        <xforms:label xml:lang="de-DE">Ordinal</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">rankings and scores, i.e. a coded ordinal</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="identifier">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Identificatie</xforms:label>
                        <xforms:label xml:lang="en-US">Identifier</xforms:label>
                        <xforms:label xml:lang="de-DE">Identifier</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">identifier</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="string">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">String</xforms:label>
                        <xforms:label xml:lang="en-US">String</xforms:label>
                        <xforms:label xml:lang="de-DE">String</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">text without markup</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="text">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Tekst</xforms:label>
                        <xforms:label xml:lang="en-US">Text</xforms:label>
                        <xforms:label xml:lang="de-DE">Tekst</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">text with markup possible</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="date">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Datum</xforms:label>
                        <xforms:label xml:lang="en-US">Date</xforms:label>
                        <xforms:label xml:lang="de-DE">Datum</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">date</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="datetime">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Datum+tijd</xforms:label>
                        <xforms:label xml:lang="en-US">Date+time</xforms:label>
                        <xforms:label xml:lang="de-DE">Datum+Zeit</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">date and time</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="complex">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">collectie van data</xforms:label>
                        <xforms:label xml:lang="en-US">collection of data</xforms:label>
                        <xforms:label xml:lang="de-DE">Zusammenstellung von Daten</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">collection of data, e.g. complex specification as part of dosage instructions, a person's name (if not further specified)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="quantity">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Hoeveelheid</xforms:label>
                        <xforms:label xml:lang="en-US">Quantity</xforms:label>
                        <xforms:label xml:lang="de-DE">Anzahl</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">quantity</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="duration">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Tijdsduur</xforms:label>
                        <xforms:label xml:lang="en-US">Duration</xforms:label>
                        <xforms:label xml:lang="de-DE">Zeitraum</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">duration</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="boolean">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Boolean</xforms:label>
                        <xforms:label xml:lang="en-US">Boolean</xforms:label>
                        <xforms:label xml:lang="de-DE">Boolean</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">boolean</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="blob">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Binair</xforms:label>
                        <xforms:label xml:lang="en-US">Binary</xforms:label>
                        <xforms:label xml:lang="de-DE">Binary</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">binary blob (image etc)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="DataSetConcept">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Data Set Concept, is either a group or an item.</xs:documentation>
            <xs:documentation xml:lang="en-US">A group may contain other groups or items and does not contain a operationalisations or value domain definitions</xs:documentation>
            <xs:documentation xml:lang="en-US">An item typically has operationalisations and value domain definitions and may not contain a concept</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="Validate Data Concept">
                    <sch:rule context="dataset//concept[not(parent::conceptList)]">
 
                        <!-- @id is always required! -->
 
                        <!-- if not inherit/@ref then @type and @statusCode SHALL be present -->
                        <sch:assert test="inherit/@ref or @type">ERROR: If concept has an @id then @type SHALL be present.</sch:assert>
                        <sch:assert test="inherit/@ref or @statusCode">ERROR: If concept has an @id then @statusCode SHALL be present.</sch:assert>
 
                        <!-- if inherit/@ref then @effectiveDate is required -->
                        <sch:assert test="not(inherit/@ref) or (inherit/@ref and @effectiveDate)">ERROR: If concept has a inherit/@ref then @effectiveDate SHALL be present.</sch:assert>
 
                        <!-- if inherit/@ref then @type and @statusCode are prohibited -->
                        <sch:assert test="not(inherit/@ref) or not(@type or @statusCode)">ERROR: If concept has a inherit/@ref then @type and @statusCode SHALL NOT be present.</sch:assert>
 
                        <!-- if not inherit then name and desc SHALL be present-->
                        <sch:assert test="inherit or (name and desc)">ERROR: If concept has an @id then name and desc SHALL be present.</sch:assert>
 
                        <!-- if inherit/@ref then child elements except comment or concept or rationale SHALL NOT be present -->
                        <sch:assert test="not(inherit/@ref) or count(* except (comment|concept|rationale|inherit))=0">ERROR: If concept has a inherit/@ref, child elements except comment or concept or
                            rationale SHALL NOT be present.</sch:assert>
 
                        <!--
                        <sch:assert test="string-length(name)>1">ERROR: concept/name SHALL be a short string.</sch:assert>
                        <sch:assert test="string-length(desc)>1">ERROR: concept/name SHALL be a short string.</sch:assert>
                        -->
                        <sch:assert test="not(@type) or @type='group' or (@type='item' and count(concept)=0)">ERROR: If concept is pf type item child concepts SHALL NOT be present.</sch:assert>
                        <sch:report role="warning" test="@type='item' and count(valueDomain[@type])=0 and count(inherit)=0">WARNING: A concept of type item SHOULD have a value domain with a type
                            definition.</sch:report>
                        <sch:assert test="@type!='group' or count(valueDomain)=0">ERROR: A concept of type group SHALL NOT have value domain definition.</sch:assert>
                        <sch:report role="warning" test="@type='group' and count(concept)=0">WARNING: A concept of type group SHOULD have concept child definition(s).</sch:report>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="inherit" type="InheritDefinition" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Data Set Concept inherits porperties from another concept</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="name" type="BusinessNameWithLanguage" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Data Set Concept Name (short). One name per language.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="desc" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Data Set Concept Description (long). One to many descriptions per language</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="source" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Data Set Concept Source, human readable hint where this data element originally comes from</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="rationale" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Data Set rationale, human readable justification or explanation why this concept is present</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="comment" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Data Set Concept Comments</xs:documentation>
                </xs:annotation>
            </xs:element>
 
            <!-- following elements for type item only -->
            <xs:element name="operationalization" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Data Set Concept Operationalization, e.g. how to measure, obtain, specify the value of an observation</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="valueDomain" type="DataSetConceptValue" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Data Set Concept Value Domain, properties of the value in an instance</xs:documentation>
                </xs:annotation>
            </xs:element>
 
            <!-- following elements for type group only -->
            <xs:element name="concept" type="DataSetConcept" minOccurs="0" maxOccurs="unbounded"/>
 
            <!-- history -->
            <xs:element name="history" type="DataSetConceptHistory" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Data Set Concept History</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <!--
            attributes checked by schematrons, see above
        -->
        <xs:attribute name="id" type="Oid" use="required"/>
        <xs:attribute name="type" type="DataSetConceptType" use="optional"/>
        <xs:attribute name="statusCode" type="ItemStatusCodeLifeCycle"/>
        <xs:attributeGroup ref="VersionHandling"/>
    </xs:complexType>
    <xs:complexType name="DataSetConceptHistory">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Data Set Concept History of either a group or an item.</xs:documentation>
            <xs:documentation xml:lang="en-US">A Concept History may not contain nested history items</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="concept" type="DataSetConcept" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="validTimeHigh" use="required" type="TimeStampNoTimezone">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">The time that the given information ceased to be correct.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:simpleType name="DataSetConceptType">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Data Set Concept Type</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="group">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Groep</xforms:label>
                        <xforms:label xml:lang="en-US">Group</xforms:label>
                        <xforms:label xml:lang="de-DE">Gruppe</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">group of data set items</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">groep van data set items</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Gruppe von Dataset-Items</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="item">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Item</xforms:label>
                        <xforms:label xml:lang="en-US">Item</xforms:label>
                        <xforms:label xml:lang="de-DE">Item</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">data set item</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">data set item</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Dataset-Item</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="ItemStatusCodeLifeCycle">
        <!-- 
            o - > new- - > draft - - > final - - - > o
             \
              \  - - - > rejected
               \ - - - > cancelled
                \ - - -> deprecated
 
 
 
            (approved) and (implemented) are under approvals
        -->
        <xs:annotation>
            <xs:documentation xml:lang="en-US">LifeCycle of the Status Code of a Data Set Item</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="new">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Nieuw</xforms:label>
                        <xforms:label xml:lang="en-US">New</xforms:label>
                        <xforms:label xml:lang="de-DE">Neu</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">item just created and is new and work in progress to become a draft/finalized item/issue. Beyond the author, nobody should look at this
                        item/issue unless it's status code is draft or finalized.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="draft">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Voorlopig</xforms:label>
                        <xforms:label xml:lang="en-US">Draft</xforms:label>
                        <xforms:label xml:lang="de-DE">Vorläufig</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">item just created an is a draft</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="final">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Definitief</xforms:label>
                        <xforms:label xml:lang="en-US">Final</xforms:label>
                        <xforms:label xml:lang="de-DE">Definitif</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">item finalized, ready for approval</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="rejected">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Afgewezen</xforms:label>
                        <xforms:label xml:lang="en-US">Rejected</xforms:label>
                        <xforms:label xml:lang="de-DE">Abgewiesen</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">item is rejected</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cancelled">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Geannuleerd</xforms:label>
                        <xforms:label xml:lang="en-US">Cancelled</xforms:label>
                        <xforms:label xml:lang="de-DE">Annuliert</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">item is cancelled</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="deprecated">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Verouderd</xforms:label>
                        <xforms:label xml:lang="en-US">Deprecated</xforms:label>
                        <xforms:label xml:lang="de-DE">Veraltet</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">item is deprecated, i.e. item should be avoided to be used, typically because it will be or has been superseded</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="TemplateStatusCodeLifeCycle">
        <!-- 
            template status (see also HL7 Templates Business Process Requirements Analysis as of January 2012)
 
            Nascent: Under development. Metadata and template may be incomplete. Entered primarily to encourage other users to be aware of ongoing process.
 
            Active: Has been published by the custodian organization and deemed fit for use. May have associated adoption and annotation metadata.
 
            Inactive: Never recommended for use. For example, rejected, withdrawn or found another template fit for use of the one under development. 
            Will not have associated adoption metadata.
 
            Under Update (adoption metadata): adopter adds adoption metadata and/or grouping metadata: these are the only actions an adopter 
            organization can perform. The template(s) in the “under update (adoption metadata” status are unavailable for any other status or 
            metadata changes until the “under update (adoption metadata” action has been completed.
 
            Pre-publication review: the template is complete, pending appropriate review. Entered primarily to encourage other users to be 
            aware of and/or participate in the review process. The custodian organization has not given it an “Active” status (i.e. it has
            not been published); and it may still be rejected (transitioned to an inactive status). E.g. the template may be under ballot by an SDO.
 
            In Review: a post-publication state; may result in a new version or a retirement or no change at all. A new version is one that
            adds clarity but not new intent; the version number is incremented by one, but the identifier is unchanged. A retirement is a 
            template that is no longer fit for purpose, and which may be replaced by a different a template with a different identifier, 
            which is linked to the retired template.
 
            Retired: No longer fit for use. Information available for historical reference.
 
        -->
        <xs:annotation>
            <xs:documentation xml:lang="en-US">LifeCycle of the Status Code of a Template</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="draft">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">In ontwikkeling</xforms:label>
                        <xforms:label xml:lang="en-US">Under develeopment</xforms:label>
                        <xforms:label xml:lang="de-DE">In Entwicklung</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Template under development (nascent). Metadata and template may be incomplete. Entered primarily to encourage other users to be aware of ongoing
                        process.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="active">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Actief</xforms:label>
                        <xforms:label xml:lang="en-US">Active</xforms:label>
                        <xforms:label xml:lang="de-DE">Aktiv</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Template has been published by the custodian organization and deemed fit for use. May have associated adoption and annotation metadata.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="inactive">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Inactief</xforms:label>
                        <xforms:label xml:lang="en-US">inactive</xforms:label>
                        <xforms:label xml:lang="de-DE">Inaktiv</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Template never recommended for use. For example, rejected, withdrawn or found another template fit for use of the one under development. Will not have
                        associated adoption metadata. </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="rejected">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Afgewezen</xforms:label>
                        <xforms:label xml:lang="en-US">Rejected</xforms:label>
                        <xforms:label xml:lang="de-DE">Abgewiesen</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Template is rejected</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cancelled">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Geannuleerd</xforms:label>
                        <xforms:label xml:lang="en-US">Cancelled</xforms:label>
                        <xforms:label xml:lang="de-DE">Annuliert</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Template is withdrawn</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="update">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">wordt geupdate</xforms:label>
                        <xforms:label xml:lang="en-US">under update</xforms:label>
                        <xforms:label xml:lang="de-DE">unter Bearbeitung</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Template under Update (adoption metadata): adopter adds adoption metadata and/or grouping metadata: these are the only actions an adopter organization can
                        perform. The template(s) in the “under update (adoption metadata)” status are unavailable for any other status or metadata changes until the “under update (adoption metadata”
                        action has been completed.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="pending">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Onder revisie vóór de publicatie</xforms:label>
                        <xforms:label xml:lang="en-US">Under pre-publication review</xforms:label>
                        <xforms:label xml:lang="de-DE">Unter Revision vor der Publikation</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Template is in pre-publication review: the template is complete, pending appropriate review. Entered primarily to encourage other users to be 
                        aware of and/or participate in the review process. The custodian organization has not given it an “Active” status (i.e. it has
                        not been published); and it may still be rejected (transitioned to an inactive status). E.g. the template may be under ballot by an SDO.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="review">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">in Review</xforms:label>
                        <xforms:label xml:lang="en-US">In Review</xforms:label>
                        <xforms:label xml:lang="de-DE">In Revision</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Template is in Review: a post-publication state; may result in a new version or a retirement or no change at all. A new version is one that
                        adds clarity but not new intent; the version number is incremented by one, but the identifier is unchanged. A retirement is a 
                        template that is no longer fit for purpose, and which may be replaced by a different a template with a different identifier, 
                        which is linked to the retired template.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="retired">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Obsoleet</xforms:label>
                        <xforms:label xml:lang="en-US">Retired</xforms:label>
                        <xforms:label xml:lang="de-DE">Obsolet</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Template retired: No longer fit for use. Information available for historical reference.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="DataSetConceptList">
        <xs:sequence>
            <xs:element name="concept" type="DataSetConceptListConcept" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string"/>
        <xs:attribute name="ref" type="xs:string"/>
    </xs:complexType>
    <xs:complexType name="DataSetConceptListConcept">
        <xs:sequence>
            <xs:element name="name" type="BusinessNameWithLanguage" minOccurs="1" maxOccurs="unbounded"/>
            <xs:element name="desc" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="Oid"/>
        <xs:attribute name="exception" type="xs:string"/>
    </xs:complexType>
    <xs:element name="scenarios">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="actors" type="ActorsDefinition" minOccurs="1" maxOccurs="1"/>
                <xs:element ref="scenario" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="scenario">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="name" type="BusinessNameWithLanguage" minOccurs="1" maxOccurs="unbounded"/>
                <xs:element name="desc" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="trigger" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="1"/>
                <xs:element name="condition" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="1"/>
                <xs:element ref="transaction" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attribute name="displayName" type="ShortDescriptiveName" use="optional"/>
            <xs:attribute name="effectiveDate" use="required" type="TimeStampNoTimezone"/>
            <xs:attribute name="id" use="required" type="Oid"/>
            <xs:attribute name="statusCode" type="ItemStatusCodeLifeCycle"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="transaction">
        <xs:complexType>
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Transaction</xs:documentation>
                <xs:appinfo>
                    <sch:pattern name="Validate Transaction">
                        <sch:rule context="scenario//transaction">
                            <sch:assert test="not(@model) or @type">ERROR: A transaction with an underlying model SHALL have a @type</sch:assert>
                        </sch:rule>
                    </sch:pattern>
                </xs:appinfo>
            </xs:annotation>
            <xs:sequence minOccurs="0">
                <xs:sequence>
                    <xs:element name="name" type="BusinessNameWithLanguage" minOccurs="1" maxOccurs="unbounded"/>
                    <xs:element name="desc" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="trigger" type="TransactionTrigger" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="condition" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="dependencies" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
                <xs:choice>
                    <xs:sequence>
                        <xs:element name="actors" type="ActorsReference" minOccurs="1" maxOccurs="1"/>
                        <xs:element ref="representingTemplate" minOccurs="0"/>
                    </xs:sequence>
                    <xs:element ref="transaction" minOccurs="0" maxOccurs="unbounded"/>
                </xs:choice>
            </xs:sequence>
            <xs:attribute name="displayName" type="ShortDescriptiveName" use="optional"/>
            <xs:attribute name="id" use="required" type="Oid"/>
            <xs:attribute name="model" type="xs:NCName"/>
            <xs:attribute name="label" type="xs:NCName"/>
            <xs:attribute name="type" type="TransactionType" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="TransactionTrigger">
        <xs:complexContent mixed="true">
            <xs:extension base="FreeFormMarkupWithLanguage">
                <xs:attribute name="id" use="optional" type="xs:NCName"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:simpleType name="TransactionType">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Allows specification of the type of a transaction.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationString">
            <xs:enumeration value="group">
                <xs:annotation>
                    <xs:appinfo>
                        <sch:pattern name="Validate Transaction Type group">
                            <sch:rule context="transaction[@type='group']" id="TransactionTypeGroup">
                                <sch:assert test="parent::*[1][local-name()='scenario']"> ERROR: Transaction groups MUST be immediate children of scenario.</sch:assert>
                                <sch:assert test="not(.//transaction[@type='group'])"> ERROR: Transaction groups MUST NOT contain transaction groups.</sch:assert>
                            </sch:rule>
                        </sch:pattern>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">A transaction of type 'group' groups transactions of other types</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="initial">
                <xs:annotation>
                    <xs:appinfo>
                        <sch:pattern name="Validate Transaction Type initial">
                            <sch:rule context="transaction[@type='initial']" id="TransactionTypeInitial">
                                <sch:assert test="parent::*[1][local-name()='transaction'][@type='group']"> ERROR: Transactions of type 'initial' MUST be immediate children of a transaction
                                    group.</sch:assert>
                                <sch:assert test="count(actors/actor[@role='sender']) &gt;=1 and count(actors/actor[@role='receiver']) &gt;=1"> ERROR: Transactions of type 'initial' MUST have at least
                                    1 sending actor and at least 1 receiving actor.</sch:assert>
                            </sch:rule>
                        </sch:pattern>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">A transaction of type 'initial' says that this is the transaction that is initially sent, and usually invokes a response. This transaction type
                        requires at least a sending and a receiving actor.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="back">
                <xs:annotation>
                    <xs:appinfo>
                        <sch:pattern name="Validate Transaction Type back">
                            <sch:rule context="transaction[@type='back']" id="TransactionTypeBack">
                                <sch:assert test="parent::*[1][local-name()='transaction'][@type='group']"> ERROR: Transactions of type 'back' MUST be immediate children of a transaction
                                    group.</sch:assert>
                                <sch:assert test="preceding-sibling::transaction[@type='initial']"> ERROR: Transactions of type 'back' MUST be preceded by a transaction of type 'initial'.</sch:assert>
                                <sch:assert test="count(actors/actor[@role='sender']) &gt;=1 and count(actors/actor[@role='receiver']) &gt;=1"> ERROR: Transactions of type 'back' MUST have at least 1
                                    sending actor and at least 1 receiving actor.</sch:assert>
                            </sch:rule>
                        </sch:pattern>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">A transaction of type 'back' says that this transaction is sent in response to another transaction that preceded this one. Transactions of type
                        'back' may invoke a new transaction, but this is again of type initial. This transaction type requires at least a sending and a receiving actor.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="stationary">
                <xs:annotation>
                    <xs:appinfo>
                        <sch:pattern name="Validate Transaction Type stationary">
                            <sch:rule context="transaction[@type='stationary']" id="TransactionTypeStationary">
                                <sch:assert test="parent::*[1][local-name()='transaction'][@type='group']"> ERROR: Transactions of type 'stationary' MUST be immediate children of a transaction
                                    group.</sch:assert>
                                <sch:assert test="not(following-sibling::transaction[position()=1][@type='back'])"> ERROR: Transactions of type 'stationary' MUST NOT be followed by a transaction of
                                    type 'back'.</sch:assert>
                                <sch:assert test="count(actors/actor[@role='sender']) =1 and count(actors/actor) =1"> ERROR: Transactions of type 'stationary' MUST have exactly 1 actor of type
                                    'sending'.</sch:assert>
                            </sch:rule>
                        </sch:pattern>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">A transaction of type 'stationary' says that this transaction does not involve communication, but rather the local registration/administration of
                        data. Transactions of type 'stationary' do not invoke new transaction. This transaction type requires exactly one sending actor.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="ActorsDefinition">
        <xs:sequence>
            <xs:element minOccurs="2" maxOccurs="unbounded" name="actor" type="ActorDefinition"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ActorsReference">
        <xs:sequence>
            <xs:element minOccurs="1" maxOccurs="unbounded" name="actor" type="ActorReference"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ActorDefinition">
        <xs:sequence>
            <xs:element name="name" type="BusinessNameWithLanguage" minOccurs="1" maxOccurs="unbounded"/>
            <xs:element name="desc" type="FreeFormMarkupWithLanguage" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" use="required" type="Oid"/>
        <xs:attribute name="type" type="ScenarioActorType"/>
        <!-- 2DO should be person|device etc -->
    </xs:complexType>
    <xs:simpleType name="ScenarioActorType">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Actor type for use in scenarios and transactions</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="person">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Persoon</xforms:label>
                        <xforms:label xml:lang="en-US">Person</xforms:label>
                        <xforms:label xml:lang="de-DE">Person</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Person</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="organization">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Organisatie</xforms:label>
                        <xforms:label xml:lang="en-US">Organization</xforms:label>
                        <xforms:label xml:lang="de-DE">Organisation</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Organization</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="device">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Apparaat</xforms:label>
                        <xforms:label xml:lang="en-US">Device</xforms:label>
                        <xforms:label xml:lang="de-DE">Gerät</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Device</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="ActorReference">
        <xs:attribute name="id" use="required" type="Oid"/>
        <xs:attribute name="role" type="ShortDescriptiveName"/>
        <!-- 2DO should be sender|receiver or so -->
    </xs:complexType>
    <xs:element name="representingTemplate">
        <xs:complexType>
            <xs:annotation>
                <xs:appinfo>
                    <sch:pattern name="Validate sourceDataset with concepts">
                        <sch:rule context="representingTemplate">
                            <sch:assert test="count(concept) = 0 or string-length(@sourceDataset)&gt;0">ERROR: if a representing template contains concept references, a sourceDataset SHALL be present</sch:assert>
                        </sch:rule>
                    </sch:pattern>
                </xs:appinfo>
            </xs:annotation>
            <xs:sequence>
                <xs:element name="concept" minOccurs="0" maxOccurs="unbounded" type="ScenarioTemplateConcept"/>
            </xs:sequence>
            <xs:attribute name="id" use="required"/>
            <xs:attribute name="displayName" type="LongDescriptiveName" use="optional"/>
            <xs:attribute name="sourceDataset" type="Oid" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="ScenarioTemplateConcept">
        <xs:annotation>
            <xs:appinfo>
                <sch:pattern name="Validate scenario ">
                    <sch:rule context="representingTemplate/concept">
                        <sch:assert test="(@minimumMultiplicity or @maximumMultiplicity) or (@conformance='C' and count(condition)&gt;0)">ERROR: a representing template concept SHALL contain cardinality or conditions</sch:assert>
                        <sch:report role="warning" test="@conformance='C' and count(condition)=0">WARNING: a conditional representing template concepts SHOULD contain conditions</sch:report>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="condition" type="ScenarioTemplateCondition" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="ref" type="Oid" use="required"/>
        <xs:attributeGroup ref="MultiplicityRangeOptional"/>
        <xs:attribute name="conformance" type="ConformanceType"/>
        <xs:attribute name="isMandatory" type="xs:boolean" default="false"/>
    </xs:complexType>
    <xs:complexType name="ScenarioTemplateCondition" mixed="true">
        <xs:attributeGroup ref="MultiplicityRangeRequired"/>
        <xs:attribute name="conformance" type="ConformanceType"/>
        <xs:attribute name="isMandatory" type="xs:boolean" default="false"/>
    </xs:complexType>
    <xs:element name="ids">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="baseId" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="defaultBaseId" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="id" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="baseId">
        <xs:complexType>
            <xs:annotation>
                <xs:appinfo>
                    <sch:pattern name="Validate baseId prefix">
                        <sch:rule context="baseId">
                            <sch:assert test="substring(@prefix, string-length(@prefix), 1)='-'">ERROR: baseId prefix must end with "-".</sch:assert>
                        </sch:rule>
                    </sch:pattern>
                </xs:appinfo>
            </xs:annotation>
            <xs:attribute name="id" type="Oid" use="required"/>
            <xs:attribute name="type" type="DecorObjectType" use="required"/>
            <xs:attribute name="prefix" type="ShortDescriptiveName" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="defaultBaseId">
        <xs:complexType>
            <xs:annotation>
                <xs:appinfo>
                    <sch:pattern name="Validate defaultBaseId type">
                        <sch:rule context="defaultBaseId">
                            <sch:let name="dbt" value="@type"/>
                            <sch:assert test="count(preceding-sibling::defaultBaseId[@type = $dbt])=0">ERROR: defaultBaseId type must be unique with project.</sch:assert>
                        </sch:rule>
                    </sch:pattern>
                </xs:appinfo>
            </xs:annotation>
            <xs:attribute name="id" type="Oid" use="required"/>
            <xs:attribute name="type" type="DecorObjectType" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="id">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="designation" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attribute name="root" type="Oid"/>
            <xs:attribute name="extension" type="xs:string"/>
            <xs:attribute name="assigningAuthority" type="LongDescriptiveName"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="issues">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="issue" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="issue">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="object" minOccurs="1" maxOccurs="unbounded" type="IssueObject"/>
                <xs:choice minOccurs="1" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation xml:lang="en-US">The list of historic events in terms of comments tracking and assignments</xs:documentation>
                    </xs:annotation>
                    <xs:element name="tracking" minOccurs="1" maxOccurs="unbounded" type="IssueTracking"/>
                    <xs:element name="assignment" minOccurs="0" maxOccurs="unbounded" type="IssueAssignment"/>
                </xs:choice>
            </xs:sequence>
            <xs:attribute name="id" type="Oid" use="required">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">The unique id of this issue</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="type" type="IssueType" use="required">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">The type of this issue</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="priority" type="IssuePriority" use="optional" default="N">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">The priority level of this issue, defaults to normal</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="displayName" type="LongDescriptiveName" use="optional">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">A short text to describe the issue (headline)</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="IssueType">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Kind of issue</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="INC">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Storing</xforms:label>
                        <xforms:label xml:lang="en-US">Incident</xforms:label>
                        <xforms:label xml:lang="de-DE">Störung</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Incident</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="RFC">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Wijzigingsverzoek</xforms:label>
                        <xforms:label xml:lang="en-US">Change Request</xforms:label>
                        <xforms:label xml:lang="de-DE">Änderungswunsch</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Change Request</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="FUT">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Voor de toekomst</xforms:label>
                        <xforms:label xml:lang="en-US">For future consideration</xforms:label>
                        <xforms:label xml:lang="de-DE">Zur zukünftigen Berücksichtigung</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">For future consideration</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CLF">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Verduidelijking/toelichting noodzakelijk</xforms:label>
                        <xforms:label xml:lang="en-US">Request for Information/Education</xforms:label>
                        <xforms:label xml:lang="de-DE">Bitte um Information/Aufklärung</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Request for Information/Education</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="IssuePriority">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Priority of issue</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="HH">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Hoogste</xforms:label>
                        <xforms:label xml:lang="en-US">Highest</xforms:label>
                        <xforms:label xml:lang="de-DE">Höchste</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Highest</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="H">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Hoog</xforms:label>
                        <xforms:label xml:lang="en-US">High</xforms:label>
                        <xforms:label xml:lang="de-DE">Hoch</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">High</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="N">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Normaal</xforms:label>
                        <xforms:label xml:lang="en-US">Normal</xforms:label>
                        <xforms:label xml:lang="de-DE">Normal</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Normal</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="L">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Laag</xforms:label>
                        <xforms:label xml:lang="en-US">Low</xforms:label>
                        <xforms:label xml:lang="de-DE">Niedrig</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Low</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="LL">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Laagst</xforms:label>
                        <xforms:label xml:lang="en-US">Lowest</xforms:label>
                        <xforms:label xml:lang="de-DE">Niedrigste</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Lowest</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="IssueObject">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">The object(s) that are subject to the issue</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="Validate issue object">
                    <sch:rule context="//issue/object">
                        <sch:assert test="@id or @name">ERROR: issue object must have an id or a name.</sch:assert>
                        <sch:assert test="@id or (@name and @flexibility)">ERROR: if issue object has a name only, flexibility must be stated.</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:attribute name="id" type="Oid" use="optional"/>
        <xs:attribute name="name" type="ShortDescriptiveName" use="optional"/>
        <xs:attribute name="type" type="IssueObjectType" use="required"/>
        <xs:attribute name="effectiveDate" type="TimeStampNoTimezone" use="required"/>
        <xs:attribute name="flexibility" type="StaticFlexibility" use="optional"/>
    </xs:complexType>
    <xs:simpleType name="IssueObjectType">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">The type of the object that is subject to an issue</xs:documentation>
        </xs:annotation>
        <xs:restriction base="DecorObjectType">
            <xs:enumeration value="VS">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Object with issues is a value set</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">Object met de issues is een value set</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Objekt mit dem Problem ist ein Value Set</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="DE">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Object with issues is a data element</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">Object met de issues is een data element</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Objekt mit dem Problem ist ein Datenelement</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="TM">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Object with issues is a template</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">Object met de issues is een template</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Objekt mit dem Problem ist ein Template</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="EL">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Object with issues is an template element</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">Object met de issues is een template element</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Objekt mit dem Problem ist ein Template-Element</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="TR">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Object with issues is a transaction</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">Object met de issues is een transactie</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Objekt mit dem Problem ist eine Transaktion</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="DS">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Object with issues is a data set</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">Object met de issues is een data set</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Objekt mit dem Problem ist ein Datensatz</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="SC">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Object with issues is a scenario</xs:documentation>
                    <xs:documentation xml:lang="nl-NL">Object met de issues is een scenario</xs:documentation>
                    <xs:documentation xml:lang="de-DE">Objekt mit dem Problem ist ein Szenario</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="IssueTracking">
        <xs:sequence>
            <xs:element ref="author" minOccurs="1" maxOccurs="1"/>
            <xs:element name="desc" minOccurs="1" maxOccurs="unbounded" type="FreeFormMarkupWithLanguage"/>
        </xs:sequence>
        <xs:attribute name="effectiveDate" type="TimeStampNoTimezone" use="required">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the effective date and time of the version of the object.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="statusCode" type="IssueStatusCodeLifeCycle" use="required"/>
    </xs:complexType>
    <xs:complexType name="IssueAssignment" mixed="true">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">The assignment of an issue to a person or group</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element ref="author" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">The id of the author of this assignment</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="desc" minOccurs="0" maxOccurs="unbounded" type="FreeFormMarkupWithLanguage">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">What is the description or question associated with this assignment</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="to" type="Oid" use="required">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifier of the person or group where this issue has been assigned to</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="name" type="ShortDescriptiveName" use="required">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Name / label of the person or group where this issue has been assigned to</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="effectiveDate" type="TimeStampNoTimezone" use="required">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the effective date and time of the assignment of the issue.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:simpleType name="IssueStatusCodeLifeCycle">
        <!-- 
            (start) - > new
            a new issue has been created, not yet finished
 
            new - > open
            a new issue has been opened, ready for action
 
            open - > inprogress
            the work on this issue is in progress
 
            open/inprogress - > feedback - > inprogress
            if further information or feedback on an issue is needed
            once the information is available the status can get back to inprogress
 
            open/inprogress - > rejected (end)
            an issue has been found to be rejected no further action is taken on the issue
 
            open/inprogress - > deferred - > inprogress
            open/inprogress - > deferred - > closed (end)
            an issue has been found to be deferred for future action and
            - further action is taken on the issue later
            - the issue is closed later
 
            open/inprogress - > referred (end)
            an issue has been found to be referred to other entities to take action on the issue
 
            cancelled
            at any time an issue may be cancelled (end)
 
            resolved
            an open/closed issue may proceed to resolved at any time
 
            the often found status "assigned" is detectable (if there is an assignee), not a status
 
        -->
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Life cycle of the status code of an issue</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="new">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Nieuw</xforms:label>
                        <xforms:label xml:lang="en-US">New</xforms:label>
                        <xforms:label xml:lang="de-DE">Neu</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Issue just created. It is new and will soon become a draft/open/finalized issue. Beyond the author, nobody should look at this issue unless it's
                        status code is open or beyond.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="open">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Open</xforms:label>
                        <xforms:label xml:lang="en-US">Open</xforms:label>
                        <xforms:label xml:lang="de-DE">Offen</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Issue is open, ready for actions to take on, also open for comments</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="inprogress">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">In behandeling</xforms:label>
                        <xforms:label xml:lang="en-US">In Progress</xforms:label>
                        <xforms:label xml:lang="de-DE">In Bearbeitung</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Issue is in progress</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="feedback">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Feedback nodig</xforms:label>
                        <xforms:label xml:lang="en-US">Feedback needed</xforms:label>
                        <xforms:label xml:lang="de-DE">Feedback nötig</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Issue is in progress but needs feedback from others</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="closed">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Gesloten</xforms:label>
                        <xforms:label xml:lang="en-US">Closed</xforms:label>
                        <xforms:label xml:lang="de-DE">Geschlossen</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Issue is closed including an solution</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="rejected">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Afgewezen</xforms:label>
                        <xforms:label xml:lang="en-US">Rejected</xforms:label>
                        <xforms:label xml:lang="de-DE">Abgewiesen</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Issue is rejected</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="deferred">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Uitgesteld</xforms:label>
                        <xforms:label xml:lang="en-US">Deferred</xforms:label>
                        <xforms:label xml:lang="de-DE">Zurückgestellt</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Issue is deferred</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cancelled">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Geannuleerd</xforms:label>
                        <xforms:label xml:lang="en-US">Cancelled</xforms:label>
                        <xforms:label xml:lang="de-DE">Annuliert</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">Issue is cancelled</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:element name="templateId">
        <xs:complexType>
            <xs:attribute name="root" type="Oid"/>
            <xs:attribute name="extension" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="NullFlavorPattern">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Null Flavor</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="nullFlavor">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Null Flavor</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="VocabType">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Vocab Type</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="L">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">L Leaf; a term that has no children in the specialization hierarchy, and is selectable, and therefore deemed to be a leaf.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="A">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">A Abstract; a term that has children in the specialization hierarchy, but is not, itself, selectable and therefore deemed
                        abstract.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="S">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">S Specializable; a term that has children in the specialization hierarchy, and is also selectable and therefore deemed
                        specializable.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="D">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">D Deprecated; a term that should not be used any longer</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="ConformanceType">
        <xs:annotation>
            <xs:appinfo>
                <xforms:label xml:lang="nl-NL"/>
                <xforms:label xml:lang="en-US"/>
                <xforms:label xml:lang="de-DE"/>
            </xs:appinfo>
            <xs:documentation xml:lang="en-US">Conformance Type</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="R">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Verplicht</xforms:label>
                        <xforms:label xml:lang="en-US">Required</xforms:label>
                        <xforms:label xml:lang="de-DE">Required</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">R required</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="C">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Conditioneel</xforms:label>
                        <xforms:label xml:lang="en-US">Conditional</xforms:label>
                        <xforms:label xml:lang="de-DE">Conditional</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">C conditional</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="NP">
                <xs:annotation>
                    <xs:appinfo>
                        <xforms:label xml:lang="nl-NL">Niet aanwezig</xforms:label>
                        <xforms:label xml:lang="en-US">Not present</xforms:label>
                        <xforms:label xml:lang="de-DE">Nicht erlaubt</xforms:label>
                    </xs:appinfo>
                    <xs:documentation xml:lang="en-US">NP not present</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="OidOrNullFlavor">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Allows both OIDs for codesystems or special 'nullFlavor'</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="Oid NullFlavorPattern"/>
    </xs:simpleType>
    <xs:element name="terminology">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="terminologyAssociation" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="valueSet" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="terminologyAssociation">
        <xs:complexType>
            <xs:annotation>
                <xs:documentation xml:lang="en-US">terminologyAssociation links a concept to a code or a concept list to a value set</xs:documentation>
                <xs:appinfo>
                    <sch:pattern name="Validate terminologyAssociation">
                        <sch:rule context="terminologyAssociation">
                            <sch:assert test="(@code and @codeSystem) or (@valueSet)">ERROR: terminologyAssociation type SHALL contain an concept association with @code and @codesystem or 
                                a concept list association with a @valueSet.</sch:assert>
                        </sch:rule>
                    </sch:pattern>
                </xs:appinfo>
            </xs:annotation>
            <!-- concept id where this assocication is associated with -->
            <xs:attribute name="conceptId" use="optional" type="Oid"/>
            <!-- a coded concept -->
            <xs:attribute name="code" use="optional" type="EnumerationString"/>
            <xs:attribute name="codeSystem" use="optional" type="OidOrNullFlavor"/>
            <xs:attribute name="codeSystemName" use="optional" type="NonEmptyString"/>
            <!-- a value set -->
            <xs:attribute name="valueSet" use="optional" type="NonEmptyString"/>
            <!-- flexibility -->
            <xs:attribute name="flexibility" use="optional" type="StaticOrDynamicFlexibility"/>
            <!-- display name -->
            <xs:attribute name="displayName" use="optional" type="NonEmptyString"/>
            <!-- version handling -->
            <xs:attributeGroup ref="VersionHandlingEffectiveDateOptional"/>
            <xs:attribute name="statusCode" type="ItemStatusCodeLifeCycle" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="valueSet">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="desc" minOccurs="0" maxOccurs="unbounded" type="FreeFormMarkupWithLanguage"/>
                <xs:element ref="sourceCodeSystem" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="conceptList" type="ValueSetConceptList" minOccurs="1" maxOccurs="1"/>
            </xs:sequence>
            <xs:attribute name="id" use="required" type="Oid"/>
            <xs:attribute name="ref" use="optional" type="Oid"/>
            <xs:attribute name="name" use="required" type="ShortDescriptiveNameNoBlanks"/>
            <xs:attribute name="displayName" use="required" type="NonEmptyString"/>
            <xs:attributeGroup ref="VersionHandling"/>
            <xs:attribute name="statusCode" type="ItemStatusCodeLifeCycle" use="optional"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="sourceCodeSystem">
        <xs:complexType>
            <xs:attribute name="id" type="Oid" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="ValueSetConceptList">
        <xs:sequence>
            <xs:element name="concept" type="ValueSetConcept" minOccurs="1" maxOccurs="unbounded"/>
            <xs:element name="exception" type="ValueSetConcept" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ValueSetConcept">
        <xs:attribute name="code" type="EnumerationString" use="required"/>
        <xs:attribute name="codeSystem" type="OidOrNullFlavor" use="required"/>
        <xs:attribute name="codeSystemName" type="NonEmptyString" use="optional"/>
        <xs:attribute name="displayName" type="NonEmptyString" use="required"/>
        <xs:attribute name="level" type="xs:integer" use="required"/>
        <xs:attribute name="type" type="VocabType" use="required"/>
    </xs:complexType>
    <xs:element name="codedConcepts">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="codedConcept" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="codedConcept">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="designation" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attribute name="code" type="EnumerationString" use="required"/>
            <xs:attribute name="codeSystem" type="OidOrNullFlavor" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="designation">
        <xs:complexType mixed="true">
            <xs:attribute name="language" type="xs:language"/>
            <xs:attribute name="preferredForLanguage" type="xs:boolean" default="false"/>
            <xs:attribute name="displayName" type="NonEmptyString" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="rules">
        <xs:annotation>
            <xs:appinfo>
                <sch:pattern name="Validate Templates">
                    <!--
                    <sch:rule context="template">
                        <sch:assert role="error" test="count(element)=0 or count(element[@name])=1">ERROR: a template MUST contain 0..1 root element with a @name attribute</sch:assert>
                        <sch:report role="warning" test="count((element[1])[@minimumMultiplicity or @maximumMultiplicity or @isMandatory or @conformance])>0"> WARNING: a template root element should
                            not contain attributes @minimumMultiplicity or @maximumMultiplicity or @isMandatory or @conformance</sch:report>
                    </sch:rule>
                    -->
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element name="templateAssociation" type="TemplateAssociationDefinition" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="template" type="TemplateDefinition" minOccurs="1" maxOccurs="unbounded"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="TemplateAssociationDefinition">
        <xs:sequence>
            <xs:element name="concept" type="TemplateAssociationConcept" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="templateId" use="required"/>
        <xs:attribute name="effectiveDate" use="required"/>
    </xs:complexType>
    <xs:complexType name="TemplateAssociationConcept">
        <xs:attribute name="ref" use="required" type="Oid"/>
        <xs:attribute name="effectiveDate" type="TimeStampNoTimezone" use="optional"/>
        <xs:attribute name="elementId" use="required"/>
    </xs:complexType>
    <xs:complexType name="TemplateDefinition">
        <xs:annotation>
            <xs:appinfo>
                <sch:pattern name="Validate Rules/Templates">
                    <sch:rule context="template/element">
                        <sch:assert test="not (@minimumMultiplicity and @isMandatory) or (@isMandatory='true' and @minimumMultiplicity&gt;0)">ERROR: if isMandatory=true, minimumMultiplicity shall be
                            greater than 0</sch:assert>
                    </sch:rule>
                    <sch:rule context="template">
                        <sch:let name="id" value="@id"/>
                        <sch:assert test="count(context[@id='*'])=0 or count(element[@name='hl7:templateId']/attribute[@root=$id])=1">ERROR: if context of template is * an element named hl7:templateId
                            must be defined with an attribute @root id of that template</sch:assert>
                        <sch:assert test="count(context[@id='**'])=0 or count(*/element[@name='hl7:templateId']/attribute[@root=$id])=1">ERROR: if context of template is ** an element named
                            hl7:templateId must be defined with an attribute @root id of that template</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:sequence>
            <!-- description(s) of template -->
            <xs:element name="desc" minOccurs="0" maxOccurs="unbounded" type="FreeFormMarkupWithLanguage"/>
            <!-- context of template
                either
                <context id="*"/> for an element templateId context
                or <context path="//"/> for a specific context path
            -->
            <xs:element ref="context" minOccurs="0" maxOccurs="1"/>
            <!-- item reference and description(s), inherited by all subsequent elements unless overridden -->
            <xs:element ref="item" minOccurs="0" maxOccurs="1"/>
            <!-- examples may be given -->
            <xs:element ref="example" minOccurs="0" maxOccurs="unbounded"/>
            <!-- 
                there maybe 0..n inherit definitions before others in a template (indicating parent / sibling templates)
            -->
            <xs:element name="inherit" type="InheritDefinition" minOccurs="0" maxOccurs="unbounded"/>
            <!-- 
                an element
            -->
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="attribute" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="choice" type="ChoiceDefinition" minOccurs="1" maxOccurs="unbounded"/>
                <xs:element name="element" type="RuleDefinition" minOccurs="1" maxOccurs="unbounded"/>
                <xs:element name="include" type="IncludeDefinition" minOccurs="1" maxOccurs="unbounded"/>
            </xs:choice>
        </xs:sequence>
 
        <!-- attributes of template (validation done by embedded schematron) -->
        <xs:attribute name="scenario" use="optional"/>
        <xs:attribute name="displayName" use="optional"/>
        <xs:attributeGroup ref="VersionHandling"/>
        <xs:attribute name="statusCode" type="TemplateStatusCodeLifeCycle" use="optional"/>
 
        <!-- attributes of element (validation done by embedded schematron) -->
        <xs:attribute name="id" type="Oid" use="required"/>
        <xs:attribute name="name" type="ShortDescriptiveNameNoBlanks" use="required"/>
    </xs:complexType>
    <xs:complexType name="RuleDefinition">
        <xs:annotation>
            <xs:appinfo>
                <sch:pattern name="Validate Rules/Templates">
                    <sch:rule context="element">
                        <!--
                        <sch:assert test="not (@minimumMultiplicity and @isMandatory) or (@isMandatory='true' and @minimumMultiplicity>0)">ERROR: if isMandatory=true, minimumMultiplicity shall be
                            greater than 0</sch:assert>
                        <sch:assert test="not(@name and @include) and not(@name and @contains)">An element may contain @name or @name/@contains or @include</sch:assert>
                        -->
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:sequence>
            <!-- description(s) of elements -->
            <xs:element name="desc" minOccurs="0" maxOccurs="unbounded" type="FreeFormMarkupWithLanguage"/>
            <!-- item reference, inherited by all subsequent elements unless overridden -->
            <xs:element ref="item" minOccurs="0" maxOccurs="1"/>
            <!-- examples may be given -->
            <xs:element ref="example" minOccurs="0" maxOccurs="unbounded"/>
            <!-- 
                there maybe 0..1 inherit definitions before others in an element (indicating parent and sibling templates)
            -->
            <xs:element name="inherit" type="InheritDefinition" minOccurs="0" maxOccurs="1"/>
            <!-- 
                there may be 0..* vocabulary and 0..* property specifications
            -->
            <xs:choice>
                <xs:element ref="vocabulary" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="property" minOccurs="0" maxOccurs="unbounded"/>
            </xs:choice>
            <!-- 
                there may be 0..* text (element content) specifications
            -->
            <xs:element name="text" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
 
            <!-- 
                attribute(s)
            -->
            <xs:element ref="attribute" minOccurs="0" maxOccurs="unbounded"/>
            <!-- 
                choice of
 
                assert 
                report
 
                defineVariable
 
                include
 
                choice
 
                or a new nested element
 
                or (non rule generating) items
                references
                constraint
                issue
            -->
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="assert" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="report" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="defineVariable" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="element" type="RuleDefinition" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="include" type="IncludeDefinition" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="choice" type="ChoiceDefinition" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="references" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="constraint" minOccurs="0" maxOccurs="unbounded" type="FreeFormMarkupWithLanguage"/>
            </xs:choice>
        </xs:sequence>
 
        <!-- attributes of template (validation done by embedded schematron) -->
        <xs:attribute name="scenario" use="optional"/>
        <xs:attribute name="displayName" use="optional"/>
        <xs:attributeGroup ref="VersionHandlingEffectiveDateOptional"/>
        <xs:attribute name="statusCode" type="ItemStatusCodeLifeCycle" use="optional"/>
 
        <!-- attributes of element (validation done by embedded schematron) -->
        <xs:attribute name="name" use="optional" type="xs:anyURI"/>
 
        <!-- @include is no longer supported and replaced by the include element -->
        <xs:attribute name="include" type="xs:anyURI" use="prohibited"/>
        <xs:attribute name="useWhere" type="xs:boolean" default="false" use="optional"/>
 
        <!-- @contains -->
        <xs:attribute name="contains" use="optional" type="xs:anyURI"/>
        <xs:attributeGroup ref="MultiplicityRangeOptional"/>
        <xs:attribute name="conformance" type="ConformanceType" use="optional"/>
        <xs:attribute name="isMandatory" type="xs:boolean" default="false" use="optional"/>
 
        <!-- an optional id for to be referenced by associated concepts -->
        <xs:attribute name="id" type="Oid"/>
 
        <!-- data type -->
        <xs:attribute name="datatype" type="DatatypeName"/>
    </xs:complexType>
    <xs:complexType name="IncludeDefinition">
        <xs:annotation>
            <xs:appinfo> </xs:appinfo>
        </xs:annotation>
        <xs:sequence>
            <!-- description(s) of an include -->
            <xs:element name="desc" minOccurs="0" maxOccurs="unbounded" type="FreeFormMarkupWithLanguage"/>
            <xs:element ref="item" minOccurs="0" maxOccurs="1"/>
            <xs:element ref="example" minOccurs="0" maxOccurs="unbounded"/>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="references" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="constraint" minOccurs="0" maxOccurs="unbounded" type="FreeFormMarkupWithLanguage"/>
            </xs:choice>
        </xs:sequence>
 
        <!-- attributes of includes (validation done by embedded schematron) -->
        <xs:attribute name="ref" use="optional" type="xs:anyURI"/>
 
        <!-- attributes of includes (validation done by embedded schematron) -->
        <xs:attribute name="scenario" use="optional"/>
        <xs:attribute name="effectiveDate" type="TimeStampNoTimezone" use="optional"/>
        <xs:attributeGroup ref="MultiplicityRangeOptional"/>
        <xs:attribute name="conformance" type="ConformanceType" use="optional"/>
        <xs:attribute name="isMandatory" type="xs:boolean" default="false" use="optional"/>
    </xs:complexType>
    <xs:complexType name="InheritDefinition">
        <xs:annotation>
            <xs:appinfo>inherit an artefact, referenced by a ref (name or id). If no effectiveDate is given, flexibility DYMAIC is assumed, STATIC date otehrwise.</xs:appinfo>
        </xs:annotation>
 
        <!-- attributes of inherit (validation done by embedded schematron) -->
        <xs:attribute name="ref" use="optional" type="xs:anyURI"/>
 
        <!-- attributes of inherit (validation done by embedded schematron) -->
        <xs:attribute name="effectiveDate" type="TimeStampNoTimezone" use="optional"/>
    </xs:complexType>
    <xs:complexType name="ChoiceDefinition">
        <xs:annotation>
            <xs:appinfo> </xs:appinfo>
        </xs:annotation>
        <xs:sequence>
            <!-- item reference, inherited by all subsequent elements unless overridden -->
            <xs:element ref="item" minOccurs="0" maxOccurs="1"/>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element name="include" type="IncludeDefinition" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="element" type="RuleDefinition" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="references" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="constraint" minOccurs="0" maxOccurs="unbounded" type="FreeFormMarkupWithLanguage"/>
            </xs:choice>
        </xs:sequence>
        <xs:attributeGroup ref="MultiplicityRangeOptional"/>
    </xs:complexType>
    <xs:element name="example">
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="skip"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="references">
        <!-- references concept="2.16.840.1.113883.2.4.6.99999.90.20010" target="2.16.840.1.113883.2.4.6.99999.90.3.700" -->
        <xs:complexType>
            <xs:attribute name="concept" type="Oid"/>
            <xs:attribute name="target" type="Oid"/>
        </xs:complexType>
    </xs:element>
    <xs:attributeGroup name="VersionHandling">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used to define version handling attributes</xs:documentation>
        </xs:annotation>
        <xs:attribute name="versionLabel" type="ShortDescriptiveName" use="optional">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the human readable version number or label of the object.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="effectiveDate" type="TimeStampNoTimezone" use="required">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the effective date of the version of the object.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="expirationDate" type="TimeStampNoTimezone" use="optional">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the exiration date of the version of the object.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="officalReleaseDate" type="TimeStampNoTimezone" use="optional">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the official release date of the version of the object.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="VersionHandlingEffectiveDateOptional">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used to define version handling attributes, effective date is optional here</xs:documentation>
        </xs:annotation>
        <xs:attribute name="versionLabel" type="ShortDescriptiveName" use="optional">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the human readable version number or label of the object.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="effectiveDate" type="TimeStampNoTimezone" use="optional">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the effective date of the version of the object.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="expirationDate" type="TimeStampNoTimezone" use="optional">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the exiration date of the version of the object.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="officalReleaseDate" type="TimeStampNoTimezone" use="optional">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the official release date of the version of the object.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:element name="assert">
        <xs:complexType mixed="true">
            <xs:attribute name="flag" type="xs:string" use="optional"/>
            <xs:attribute name="see" type="xs:string" use="optional"/>
            <xs:attribute name="role" use="required" type="AssertRole"/>
            <xs:attribute name="test" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="report">
        <xs:complexType mixed="true">
            <xs:attribute name="flag" type="xs:string" use="optional"/>
            <xs:attribute name="see" type="xs:string" use="optional"/>
            <xs:attribute name="role" use="required" type="AssertRole"/>
            <xs:attribute name="test" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="defineVariable">
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:element name="code" minOccurs="0" maxOccurs="1" type="VarCode"/>
                <xs:element name="use" minOccurs="0" maxOccurs="1" type="VarUse"/>
            </xs:sequence>
            <xs:attribute name="name" type="xs:NCName" use="required"/>
            <xs:attribute name="path" type="xs:anyURI" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="VarCode">
        <xs:attribute name="code" use="required" type="EnumerationString"/>
        <xs:attribute name="codeSystem" use="required" type="OidOrNullFlavor"/>
    </xs:complexType>
    <xs:complexType name="VarUse">
        <xs:attribute name="path" use="required" type="xs:anyURI"/>
        <xs:attribute name="as" use="required" type="DatatypeName"/>
    </xs:complexType>
    <xs:simpleType name="AssertRole">
        <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="fatal"/>
            <xs:enumeration value="error"/>
            <xs:enumeration value="warning"/>
            <xs:enumeration value="hint"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:element name="item">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="desc" minOccurs="0" maxOccurs="unbounded" type="FreeFormMarkupWithLanguage"/>
            </xs:sequence>
            <xs:attribute name="ref" use="required" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="context">
        <xs:complexType>
            <xs:attribute name="id" use="optional" type="SelfReferenceTemplateIdOrOid"/>
            <xs:attribute name="path" use="optional" type="xs:anyURI"/>
            <xs:attribute name="templateId" use="optional" type="Oid"/>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="SelfReferenceTemplateId">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used as the type of a context template id </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="*">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">use id in context sibling</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="**">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">use id in context parent</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="SelfReferenceTemplateIdOrOid">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">a string "*" or "**" or a valid Oid</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="SelfReferenceTemplateId Oid"/>
    </xs:simpleType>
    <xs:element name="pathname">
        <xs:complexType>
            <xs:attribute name="path" use="required" type="Uri"/>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="DecimalRange">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">A real number that is restricted to a maximum of 10 characters, and may have no more than 5 decimal places.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:decimal">
            <xs:maxExclusive value="1000000000"/>
            <xs:minInclusive value="-1000000000"/>
            <xs:fractionDigits value="5"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="IntegerRange">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">An integer number that is restricted to a maximum of 10 characters</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:integer">
            <xs:maxExclusive value="1000000000"/>
            <xs:minInclusive value="-1000000000"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="IntegerOrDecimalRange">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">An integer or decimal range</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="IntegerRange DecimalRange"/>
    </xs:simpleType>
    <xs:element name="cardinality">
        <xs:complexType>
            <xs:annotation>
                <xs:appinfo>
                    <sch:pattern name="Validate Cardinality">
                        <sch:rule context="cardinality">
                            <sch:extends rule="MultiplicityRange"/>
                        </sch:rule>
                    </sch:pattern>
                </xs:appinfo>
            </xs:annotation>
            <xs:attributeGroup ref="MultiplicityRangeRequired"/>
            <xs:attribute name="conformance" type="ConformanceType"/>
            <xs:attribute name="isMandatory" type="xs:boolean" default="false"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="attribute">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="desc" minOccurs="0" maxOccurs="unbounded" type="FreeFormMarkupWithLanguage"/>
                <xs:element ref="vocabulary" minOccurs="0" maxOccurs="unbounded"/>
 
                <!-- constraints for attributes of type "coded" or "quantities"??????? -->
                <!-- 
                    <xs:choice maxOccurs="1">
                    <xs:element ref="vocabulary" minOccurs="0" maxOccurs="1"/>
                    <xs:element ref="property" minOccurs="0" maxOccurs="1"/>
                </xs:choice>
                -->
            </xs:sequence>
 
            <!-- real attributes -->
            <xs:attribute name="classCode" type="EnumerationString"/>
            <xs:attribute name="moodCode" type="EnumerationString"/>
            <xs:attribute name="extension" type="EnumerationString"/>
            <xs:attribute name="root" type="OidChoiceList"/>
            <xs:attribute name="typeCode" type="EnumerationString"/>
            <xs:attribute name="contextControlCode" type="EnumerationToken"/>
            <xs:attribute name="operator" type="EnumerationToken"/>
            <xs:attribute name="institutionSpecified" type="xs:boolean"/>
            <xs:attribute name="value" type="EnumerationToken"/>
            <xs:attribute name="unit" type="EnumerationToken"/>
            <xs:attribute name="determinerCode" type="EnumerationToken"/>
            <xs:attribute name="contextConductionInd" type="xs:boolean"/>
            <xs:attribute name="inversionInd" type="xs:boolean"/>
            <xs:attribute name="independentInd" type="xs:boolean"/>
            <xs:attribute name="negationInd" type="EnumerationString"/>
            <xs:attribute name="mediaType" type="EnumerationString"/>
            <xs:attribute name="representation" type="EnumerationString"/>
            <xs:attribute name="use" type="EnumerationString"/>
            <xs:attribute name="qualifier" type="EnumerationString"/>
 
            <!-- attribute optionality -->
            <xs:attribute name="isOptional" type="xs:boolean"/>
 
            <!-- name of attributes required (name)/prohibited -->
            <xs:attribute name="name" type="EnumerationToken"/>
            <xs:attribute name="prohibited" type="EnumerationToken"/>
            <!-- data type II: elements where other siblings are allowed -->
 
            <!-- null flavor constraints -->
            <xs:attribute name="nullFlavor" type="EnumerationString"/>
 
            <!-- data type??? -->
            <xs:attribute name="datatype" type="DatatypeName"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="property">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for attributes of type "quantity" or "string". Allows assertion of one or more units, ranges and fraction digits</xs:documentation>
        </xs:annotation>
        <xs:complexType>
 
            <!-- quantity constraints -->
            <xs:attribute name="unit" type="xs:string"/>
            <xs:attribute name="minInclude" type="IntegerOrDecimalRange"/>
            <xs:attribute name="maxInclude" type="IntegerOrDecimalRange"/>
            <xs:attribute name="fractionDigits" type="FractionDigitsType"/>
 
            <!-- string constraints -->
            <xs:attribute name="minLength" type="SmallNonNegativeInteger"/>
            <xs:attribute name="maxLength" type="SmallNonNegativeInteger"/>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="FractionDigitsType">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Data Set Value Domain Time Stamp Precision</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="\d{1,4}[!]{0,1}"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:element name="vocabulary">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for attributes of "coded" types. Allows assertion of one or more codes, code systems or value sets.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
 
            <!-- value set assertions -->
            <xs:attribute name="valueSet" type="BasicIdOrOid"/>
            <!-- 2DO: or OID of a value set -->
            <xs:attribute name="flexibility" type="StaticOrDynamicFlexibility"/>
 
            <!-- code constraints -->
            <xs:attribute name="code" type="EnumerationString"/>
            <xs:attribute name="codeSystem" type="Oid"/>
 
            <!-- other constraints -->
            <xs:attribute name="displayName" type="xs:string"/>
            <xs:attribute name="codeSystemName" type="xs:string"/>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="StaticFlexibility">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">As an expression of static flexibility this contains simply a valid date (without the prefix "static")</xs:documentation>
        </xs:annotation>
        <xs:restriction base="TimeStampNoTimezone"/>
    </xs:simpleType>
    <xs:simpleType name="DynamicFlexibility">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Fixed string "dynamic", means most recent version of the object</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="dynamic">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">dynamic</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="StaticOrDynamicFlexibility">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Either the fixed string "dynamic" or a valid xs:date as an effective date of the version of the object</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="DynamicFlexibility StaticFlexibility"/>
    </xs:simpleType>
    <xs:simpleType name="BasicIdOrOid">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Either a string or an oid in order to identify the object</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="BasicId Oid"/>
    </xs:simpleType>
 
 
    <!-- following is borrowed from the mif-core-patterns.xsd and other mif schemas -->
    <xs:simpleType name="TimeStampNoTimezone">
        <xs:restriction base="xs:dateTime">
            <xs:pattern value="\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Years">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">A list of years</xs:documentation>
        </xs:annotation>
        <xs:list itemType="Year"/>
    </xs:simpleType>
    <xs:simpleType name="Year">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">A year (restricted to 20th and 21st century)</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:integer">
            <xs:pattern value="(19|20)\d{2}"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="SingleNonNegativeInteger">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">An integer that is greater than or equal to zero, with a maximum length of 1 character</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:nonNegativeInteger">
            <xs:maxExclusive value="10"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="SmallNonNegativeInteger">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">An integer that is greater than or equal to zero, with a maximum length of 6 characters</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:nonNegativeInteger">
            <xs:maxExclusive value="1000000"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="SmallPositiveInteger">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">An integer that is greater than or equal to 1, with a maximum length of 6 characters</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:positiveInteger">
            <xs:maxExclusive value="1000000"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="PositiveDecimal">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">A real number greater than 0 that is restricted to a maximum of 10 characters, and may have no more than 3 decimal places.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:decimal">
            <xs:maxExclusive value="1000000"/>
            <xs:minInclusive value=".001"/>
            <xs:fractionDigits value="3"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="NonNegativeDecimal">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">A real number that is restricted to a maximum of 10 characters, and may have no more than 3 decimal places.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:decimal">
            <xs:maxExclusive value="1000000"/>
            <xs:minInclusive value="0"/>
            <xs:fractionDigits value="3"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Decimal">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">A real number that is restricted to a maximum of 10 characters, and may have no more than 3 decimal places.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:decimal">
            <xs:maxExclusive value="1000000"/>
            <xs:minInclusive value=".001"/>
            <xs:fractionDigits value="3"/>
        </xs:restriction>
    </xs:simpleType>
    <!-- Simple types used in defining various attributes -->
    <xs:simpleType name="Uuid">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Universal Unique Identifier (aka GUID). Used for identifiers</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="Validate Uuid type">
                    <!--<sch:rule context="mif:Uuid">-->
                    <!-- Exclude guiids in graphicIds because these are referencing a guid elsewhere in the document 
						<sch:report test="count(//attribute(*, mif:Uuid)[count(parent::element(*,mif:GraphicInformation))=0][.=current()]|//element(*, mif:Uuid)[.=current()])>1">
							ERROR: UUIDs should never be duplicated within a document.</sch:report> -->
                    <!--</sch:rule>-->
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:length value="36"/>
            <xs:pattern value="[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="HashCode">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Base64 representation of a SHA-256 hashcode</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="([A-Za-z0-9/+]){27}="/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Oid">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">ISO Object Identifier. Used for identifiers</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:maxLength value="255"/>
            <xs:pattern value="[1-9][0-9]*(\.[0-9]+)*"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="OidChoiceList">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Choice list of Oids</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:maxLength value="1028"/>
            <xs:pattern value="([1-9][0-9]*(\.[0-9]+)*)(\|[1-9][0-9]*(\.[0-9]+)*)*"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="DefinedContextKind">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Defines pre-defined 'contexts'. At present these consist primarily of realms.</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="AffiliateKind"/>
    </xs:simpleType>
    <xs:simpleType name="RealmKind">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Allows both pre-defined affiliates and other affiliate issued sub-realm identifiers</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="EnumerationToken DefinedContextKind"/>
    </xs:simpleType>
    <xs:simpleType name="RealmNamespaceKind">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Allows affiliate and free-form as well as OID-based namespaces to be identified for keeping content distinct</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="RealmKind Oid"/>
    </xs:simpleType>
    <xs:simpleType name="Uri">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for references to some external resource.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyURI">
            <xs:maxLength value="255"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Url">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for hypertext references. (Must be prefixed by "http://")</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyURI">
            <xs:maxLength value="255"/>
            <xs:pattern value="http(s)?://.+"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="EMail">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for email references. (Must be prefixed by "mailto://")</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyURI">
            <xs:maxLength value="255"/>
            <xs:pattern value="mailto:.+"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="LocalFileReference">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for file references. (Must be prefixed by "file://")</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:anyURI">
            <xs:maxLength value="255"/>
            <xs:pattern value="(file://)?([A-Za-z0-9_\-\.]+/)*[A-Za-z0-9_\-\.]+"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="NonEmptyString">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used as the base for most string datatypes. (Ensures that empty strings are not allowed.). Should never be implemented directly because it has no length
                limits.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:minLength value="1"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="CMETAttributionString">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Type for CMET attribution types. Basically a length-limited lowerCamelCase string that allows dashes and has a length limit.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:maxLength value="50"/>
            <xs:pattern value="[a-z][a-z0-9A-Z\-]*"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="LowerCamelCase">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Type for attribute and association type names. Should never be implemented directly because it has no length limits.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:pattern value="[a-z][a-z0-9]*([A-Z][a-z0-9]*)*"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="UpperCamelCase">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Type for class and type names</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:pattern value="([A-Z][a-z0-9_\-]*)+"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="PrefixedUpperCamelCase">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for CMET type names. (Basically class names with a prefix separated by an underscore)</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:maxLength value="50"/>
            <xs:pattern value="[A-Z]+_([A-Z][a-z0-9_\-]*)+"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="BasicFormalName">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for formal names and short descriptions</xs:documentation>
        </xs:annotation>
        <xs:restriction base="NonEmptyString">
            <xs:maxLength value="120"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="FormalProperName">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for class and type names</xs:documentation>
        </xs:annotation>
        <xs:restriction base="UpperCamelCase">
            <xs:maxLength value="60"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="AllClassName">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Choice of a class name or a CMET name</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="FormalProperName PrefixedUpperCamelCase"/>
    </xs:simpleType>
    <xs:simpleType name="FormalPropertyName">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for attribute, association and property names</xs:documentation>
        </xs:annotation>
        <xs:restriction base="LowerCamelCase">
            <xs:maxLength value="50"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="ShortDescriptiveName">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used when descriptions are intended to be very short</xs:documentation>
        </xs:annotation>
        <xs:restriction base="NonEmptyString">
            <xs:maxLength value="80"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="ShortDescriptiveNameNoBlanks">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used when descriptions are intended to be very short and without "weird" characters</xs:documentation>
        </xs:annotation>
        <xs:restriction base="NonEmptyString">
            <xs:pattern value="[A-Za-z,0-9,ä,ö,ü,ß,Ä,Ö,Ü,ó,ï,é,\.,_,\-]{1,80}"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="LongDescriptiveName">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used when descriptions can be potentially quite long</xs:documentation>
        </xs:annotation>
        <xs:restriction base="NonEmptyString">
            <xs:maxLength value="255"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="XDomainName">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for x-domains</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:maxLength value="50"/>
            <xs:pattern value="(x_)?([A-Z][a-z0-9_]*)+"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="DatatypeName">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for datatype names</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:maxLength value="60"/>
            <xs:pattern value="[A-Z_]+(.[A-Za-z]+)*(.diffType)?"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="MimeType">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used to filter MIME type names</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:maxLength value="40"/>
            <xs:pattern value="[a-z]+/[a-z0-9\-]+"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Version">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for version numbers</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:minLength value="1"/>
            <xs:maxLength value="16"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="ShortString">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for very short strings</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:minLength value="1"/>
            <xs:maxLength value="10"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="CollapsedPackageId">
        <xs:restriction base="xs:token">
            <xs:pattern value="([A-Za-z,0-9,_,\-]{1,80}=){0,7}[A-Za-z,0-9,_,\-,\.]{1,80}">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Allows between 1 and 7 strings of length 1 to 80 characters (uppercase alpha, digits, underscore and space) where strings are separated by
                        "="</xs:documentation>
                </xs:annotation>
            </xs:pattern>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="TemplateId">
        <xs:restriction base="xs:NMTOKEN">
            <xs:pattern value="([A-Z0-9_\-]{1,80}=){0,6}[A-Z0-9_\-]{1,80}#([A-Z][a-z0-9_\-]*)+(\.[a-z][a-z0-9]*([A-Z][a-z0-9]*)*)?">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">TemplateId followed by "#" followed by a class name followed by an optional "." and attribute name</xs:documentation>
                </xs:annotation>
            </xs:pattern>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="BasicId">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used for generic identifiers</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:minLength value="1"/>
            <xs:maxLength value="40"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:attributeGroup name="MultiplicityRangeRequired">
        <xs:annotation>
            <xs:appinfo>
                <sch:pattern name="Validate MultiplicityRange type">
                    <sch:rule abstract="true" id="MultiplicityRange">
                        <sch:report role="warning" test="@maximumMultiplicity!='*' and number(@minimumMultiplicity)&gt;number(@maximumMultiplicity)"> ERROR: MinimumMultiplicity must be less than or equal to
                            maximumMultiplicity.</sch:report>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
            <xs:documentation xml:lang="en-US">Used to define multiplicty</xs:documentation>
            <xs:documentation xml:lang="en-US">UML: Corresponds to UML type MultiplicityRange, with exception that upper boundary cannot be 0</xs:documentation>
        </xs:annotation>
        <xs:attribute name="minimumMultiplicity" type="SmallNonNegativeInteger" use="required">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the minimum number of repetitions of this element that may occur within the containing element.</xs:documentation>
                <xs:documentation xml:lang="en-US">UML: multiplicity (lower-bound)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maximumMultiplicity" type="UnlimitedInteger" use="required">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the maximum number of repetitions of this element that may occur within the containing element.</xs:documentation>
                <xs:documentation xml:lang="en-US">UML: multiplicity (upper-bound)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="MultiplicityRangeOptional">
        <xs:annotation>
            <xs:appinfo>
                <sch:pattern name="Validate MultiplicityRange type">
                    <sch:rule abstract="true" id="MultiplicityRange">
                        <sch:report role="warning" test="@maximumMultiplicity!='*' and number(@minimumMultiplicity)&gt;number(@maximumMultiplicity)"> ERROR: MinimumMultiplicity must be less than or equal to
                            maximumMultiplicity.</sch:report>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
            <xs:documentation xml:lang="en-US">Used to define multiplicty</xs:documentation>
            <xs:documentation xml:lang="en-US">UML: Corresponds to UML type MultiplicityRange, with exception that upper boundary cannot be 0</xs:documentation>
        </xs:annotation>
        <xs:attribute name="minimumMultiplicity" type="SmallNonNegativeInteger" use="optional">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the minimum number of repetitions of this element that may occur within the containing element.</xs:documentation>
                <xs:documentation xml:lang="en-US">UML: multiplicity (lower-bound)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maximumMultiplicity" type="UnlimitedInteger" use="optional">
            <xs:annotation>
                <xs:documentation xml:lang="en-US">Identifies the maximum number of repetitions of this element that may occur within the containing element.</xs:documentation>
                <xs:documentation xml:lang="en-US">UML: multiplicity (upper-bound)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:simpleType name="UnlimitedInteger">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">UML: Corresponds to UnlimitedInteger. (Only distinction is that this type does not allow 0 while UML does)</xs:documentation>
        </xs:annotation>
        <xs:union memberTypes="SmallPositiveInteger UnlimitedMultiplicity"/>
    </xs:simpleType>
    <xs:simpleType name="UnlimitedMultiplicity">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used as a 'part' of the UnlimitedInteger type</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="*">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Unlimited</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="EnumerationToken">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used as the base class for all 'codes' which qualify or must be handled as NMTOKEN</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:NMTOKEN">
            <xs:maxLength value="50"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="EnumerationString">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Used as the base class for all 'codes' which cannot be handled as NMTOKEN</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:maxLength value="64"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="AffiliateKind">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">The list of HL7 affiliates.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="EnumerationToken">
            <xs:enumeration value="AR">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Argentina</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="AU">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Australia</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="AT">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Austria</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="BR">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Brazil</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CA">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Canada</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CL">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Chile</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CN">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">China</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="HR">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Croatia</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CZ">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Czech Republic</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="DK">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Denmark</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="FI">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Finland</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="FR">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">France</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="DE">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Germany</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="GR">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Greece</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="IN">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">India</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="IE">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Ireland</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="IT">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Italy</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="JP">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Japan</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="KR">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Korea</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="LT">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Lithuania</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="MX">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Mexico</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="NL">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Netherlands</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="NZ">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">New Zealand</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="RO">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Romania</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="SOA">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Southern Africa</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="ES">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Spain</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="SE">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Sweden</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CH">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Switzerland</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="TW">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Taiwan</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="TR">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Turkey</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="UK">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">United Kingdom</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="US">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">United States</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="UY">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Uruguay</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="UV">
                <xs:annotation>
                    <xs:documentation xml:lang="en-US">Applies to all realms (unless there is a realm-specific override)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="FreeFormMarkupWithLanguage" mixed="true">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">Allows unconstrained markup to identify the language in which it is expressed and when it was last translated</xs:documentation>
            <xs:documentation xml:lang="en-US">UML: Handled as 'mixed text' stored as a string, but with parallel tags identifying langage</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="Validate FreeFormMarkupWithLanguage type">
                    <sch:rule abstract="true" id="FreeFormMarkupWithLanguage">
                        <sch:report role="warning" test="count(preceding-sibling::*[name(.)=name(current())][@language=current()/@language or                              ((@language='EN' or not(@language)) and (current()/@language='EN' or not(current()/@language)))])!=0"> ERROR: Each repetition of complex markup with language must be a different langage (no language is equivalent to 'EN').</sch:report>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="true">
            <xs:extension base="VariousMixedContent">
                <xs:attribute name="language" type="xs:language" use="optional" default="en-US">
                    <xs:annotation>
                        <xs:documentation xml:lang="en-US">Indicates the language in which the marked up text is expressed</xs:documentation>
                        <xs:documentation xml:lang="en-US">UML: part of a complex stereotype tag</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="lastTranslated" type="TimeStampNoTimezone" use="optional">
                    <xs:annotation>
                        <xs:documentation xml:lang="en-US">Indicates when this languages rendition was last translated from the original.</xs:documentation>
                        <xs:documentation xml:lang="en-US">UML: part of a complex stereotype tag</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="mimeType" type="MimeType" use="optional">
                    <xs:annotation>
                        <xs:documentation xml:lang="en-US">Indicates the mime type in which the data is expressed. If not specified, applications must interpret the content based on other context or
                            specific application rules. Applications that do not recognize content must retain it unchanged.</xs:documentation>
                        <xs:documentation xml:lang="en-US">UML: Part of a complex tag</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="BusinessNameWithLanguage" mixed="true">
        <xs:annotation>
            <xs:documentation>A name for the artifact that will be meaningful to business or domain experts. One artifact may have different business name translations for each realm and/or
                language.</xs:documentation>
            <xs:documentation>UML: tagged value on ModelElement</xs:documentation>
            <xs:documentation>DublinCore: Maps to 'Alternative'</xs:documentation>
            <xs:appinfo>
                <sch:pattern name="Validate BusinessNameWithLanguage type">
                    <sch:rule abstract="true" id="BusinessNameWithLanguage">
                        <sch:report role="warning" test="count(preceding-sibling::*[name(.)=name(current())][@language=current()/@language or                              ((@language='EN' or not(@language)) and (current()/@language='EN' or not(current()/@language)))])!=0"> ERROR: Each repetition of complex markup with language must be a different langage (no language is equivalent to 'EN').</sch:report>
                    </sch:rule>
                </sch:pattern>
            </xs:appinfo>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="language" type="xs:language" use="optional" default="en-US">
                    <xs:annotation>
                        <xs:documentation>Indicates the language in which the business name is expressed</xs:documentation>
                        <xs:documentation>UML: Part of a complex tag value</xs:documentation>
                        <xs:documentation>DublinCore: Language</xs:documentation>
                        <xs:documentation>Alpha</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="VariousMixedContent" mixed="true">
        <xs:annotation>
            <xs:documentation xml:lang="en-US">A type that allows unconstrained mixed-text markup</xs:documentation>
        </xs:annotation>
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:any processContents="skip"/>
        </xs:sequence>
    </xs:complexType>
 
 
    <!-- =================================== -->
</xs:schema>